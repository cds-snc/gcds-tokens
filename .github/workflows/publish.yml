name: Publish tokens
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'package.json'

permissions:
  id-token: write
  contents: read

env:
  CDN_BUCKET: gc-design-system-production-cdn
  CDN_REGION: ca-central-1
  PACKAGE_NAME: '@cdssnc/gcds-tokens'

jobs:
  build-deploy:
    name: Publish package
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Check if package exists
        id: package_exists
        run: |
          if npm show ${{ env.PACKAGE_NAME }}@${{ env.VERSION }} > /dev/null 2>&1; then
            echo "pkg_exists=true" >> $GITHUB_ENV
          else
            echo "pkg_exists=false" >> $GITHUB_ENV
          fi

      - name: Publish
        if: env.pkg_exists != 'true'
        uses: JS-DevTools/npm-publish@7f8fe47b3bea1be0c3aec2b717c5ec1f3e03410b
        id: publish
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Sleep for 60 seconds to give more time for NPM to complete publishing before proceeding to publish the rest
        if: env.pkg_exists != 'true'
        run: sleep 60

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::307395567143:role/gcds-tokens-apply
          role-session-name: CDNPublish
          aws-region: ${{ env.CDN_REGION }}

      - name: Update CDN
        run: |
          PUBLISHED_PACKAGE="${{ env.PACKAGE_NAME }}@${{ env.VERSION }}"
          echo "Uploading package to the CDN: $PUBLISHED_PACKAGE"

          mkdir -p ./tmp \
            && sleep 60 \
            && npm install --prefix ./tmp "$PUBLISHED_PACKAGE" \
            && cd ./tmp/node_modules

          aws s3 sync ./${{ env.PACKAGE_NAME }} s3://${{ env.CDN_BUCKET }}/"$PUBLISHED_PACKAGE" --delete
          aws s3 sync ./${{ env.PACKAGE_NAME }} s3://${{ env.CDN_BUCKET }}/${{ env.PACKAGE_NAME }}@latest --delete
          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key "$PUBLISHED_PACKAGE"/package.json
          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key ${{ env.PACKAGE_NAME }}@latest/package.json

          aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_CLOUDFRONT_DIST_ID }} --paths "/*"

      - name: Report deployment to Sentinel
        if: steps.publish.outputs.id != ''
        uses: cds-snc/sentinel-forward-data-action@main
        with:
          input_data: '{"product": "design-system", "sha": "${{ github.sha }}", "version": "${{steps.publish.outputs.id}}", "repository": "${{ github.repository }}", "environment": "production", "status": "${{ job.status }}"}'
          log_type: CDS_Product_Deployment_Data
          log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

      - name: Slack notify on failure
        if: failure()
        run: |
          json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: Publish @cdssnc/gcds-tokens failed: <https://github.com/cds-snc/gcds-tokens/actions/workflows/publish.yml|Publish tokens>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_OPS }}

      - name: Slack notify on release and publish
        if: steps.publish.outputs.id != ''
        run: |
          VERSION=$(jq -r '.version' package.json)
          json='{"text":"ðŸš€ New release available! @cdssnc/gcds-tokens *version <https://github.com/cds-snc/gcds-tokens/releases/tag/gcds-tokens-v'$VERSION'|${{steps.publish.outputs.id}}>*"}'
          echo "Posting to slack: $json"
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_DSNDEV }}
